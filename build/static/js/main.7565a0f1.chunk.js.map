{"version":3,"sources":["impact.js","severeImpact.js","utils/routes.js","components/home/homeFooter.js","estimator.js","components/home/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Impact","data","reportedCases","periodType","timeToElapse","totalHospitalBeds","population","avgDailyIncomePopulation","region","impactCurrentlyInfected","impactInfectionsByRequestedTime","factor","noOfDays","Math","round","impactCasesByRequestedTime","impacthospitalBedsByRequestedTime","casesForICUByRequestedTime","impactCasesForVentilatorsByRequestedTime","avgPopulation","ImpactDollarsInFlight","severeImpact","severeCurrentlyInfected","severeInfectionsByRequestedTime","severeCasesByRequestedTime","hospitalBedsByRequestedTime","casesForVentilatorsByRequestedTime","dollarsInFlight","ROUTES","home","HomeFooter","props","className","footerClass","page","href","register","copyright","Date","getFullYear","protoType","PropTypes","string","defaultProps","require","covid19ImpactEstimator","estimate","impact","currentlyInfected","infectionsByRequestedTime","schema","presence","allowEmpty","message","length","minimum","maximum","useStyles","makeStyles","theme","createStyles","formData","margin","spacing","width","root","flexGrow","marginTop","backgroundColor","palette","grey","paper","padding","color","text","secondary","Home","classes","resultsData","setResults","useState","functionData","setData","formState","setFormState","values","period","touched","errors","useEffect","validate","isValid","handleInputChange","event","persist","target","name","id","type","checked","value","noData","Typography","variant","display","gutterBottom","hasError","field","Grid","container","direction","justify","alignItems","item","xs","sm","Paper","noValidate","autoComplete","onSubmit","preventDefault","avgAge","avgDailyIncomeInUSD","TextField","label","placeholder","onChange","error","helperText","defaultValue","FormControl","component","FormLabel","RadioGroup","row","aria-label","FormControlLabel","control","Radio","labelPlacement","DialogActions","Button","onClick","disabled","style","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7565a0f1.chunk.js","sourcesContent":["const Impact = (data) => {\n  const {\n    reportedCases, periodType, timeToElapse, totalHospitalBeds, population\n  } = data;\n  const { avgDailyIncomePopulation } = data.region;\n  const impactCurrentlyInfected = reportedCases * 10;\n  let impactInfectionsByRequestedTime;\n  let factor;\n  let noOfDays;\n\n  if (periodType === 'days') {\n    noOfDays = timeToElapse;\n    factor = noOfDays / 3;\n    impactInfectionsByRequestedTime = impactCurrentlyInfected * (2 ** Math.round(factor));\n  } else if (periodType === 'months') {\n    noOfDays = timeToElapse * 30;\n    factor = noOfDays / 3;\n    impactInfectionsByRequestedTime = impactCurrentlyInfected * (2 ** Math.round(factor));\n  } else {\n    noOfDays = timeToElapse * 7;\n    factor = noOfDays / 3;\n    impactInfectionsByRequestedTime = impactCurrentlyInfected * (2 ** Math.round(factor));\n  }\n\n  const impactCasesByRequestedTime = (15 / 100) * impactInfectionsByRequestedTime;\n  const availableBeds = Math.round((65 / 100) * totalHospitalBeds);\n  const impacthospitalBedsByRequestedTime = availableBeds - impactCasesByRequestedTime;\n  const casesForICUByRequestedTime = (5 / 100) * impactInfectionsByRequestedTime;\n  const impactCasesForVentilatorsByRequestedTime = Math.round(\n    (2 / 100) * impactInfectionsByRequestedTime\n  );\n\n  const avgPopulation = Math.round(\n    ((\n      impactInfectionsByRequestedTime - population\n    ) / population) * 100\n  );\n  const ImpactDollarsInFlight = Math.round(\n    (\n      impactInfectionsByRequestedTime * avgPopulation * (65 / 100)\n    ) * avgDailyIncomePopulation * noOfDays\n  );\n  return {\n    impactCurrentlyInfected,\n    impactInfectionsByRequestedTime,\n    impactCasesByRequestedTime,\n    impacthospitalBedsByRequestedTime,\n    casesForICUByRequestedTime,\n    impactCasesForVentilatorsByRequestedTime,\n    ImpactDollarsInFlight\n  };\n};\nmodule.exports = {\n  Impact\n};\n","const severeImpact = (data) => {\n  const {\n    reportedCases, periodType, timeToElapse, totalHospitalBeds, population\n  } = data;\n  const { avgDailyIncomePopulation } = data.region;\n  const severeCurrentlyInfected = reportedCases * 50;\n  let severeInfectionsByRequestedTime;\n  let factor;\n  let noOfDays;\n\n  if (periodType === 'days') {\n    noOfDays = timeToElapse;\n    factor = timeToElapse / 3;\n    severeInfectionsByRequestedTime = severeCurrentlyInfected * (2 ** Math.round(factor));\n  } else if (periodType === 'months') {\n    noOfDays = timeToElapse * 30;\n    factor = noOfDays / 3;\n    severeInfectionsByRequestedTime = severeCurrentlyInfected * (2 ** Math.round(factor));\n  } else {\n    noOfDays = timeToElapse * 7;\n    factor = noOfDays / 3;\n    severeInfectionsByRequestedTime = severeCurrentlyInfected * (2 ** Math.round(factor));\n  }\n\n  const severeCasesByRequestedTime = (15 / 100) * severeInfectionsByRequestedTime;\n  const availableBeds = Math.round((65 / 100) * totalHospitalBeds);\n  const hospitalBedsByRequestedTime = availableBeds - severeCasesByRequestedTime;\n\n  const casesForVentilatorsByRequestedTime = Math.round((2 / 100) * severeCasesByRequestedTime);\n\n  const avgPopulation = Math.round(\n    ((\n      severeInfectionsByRequestedTime - population\n    ) / population) * 100\n  );\n  const dollarsInFlight = Math.round(\n    (\n      severeInfectionsByRequestedTime * avgPopulation * (65 / 100)\n    ) * avgDailyIncomePopulation * noOfDays\n  );\n  return {\n    severeCurrentlyInfected,\n    severeInfectionsByRequestedTime,\n    severeCasesByRequestedTime,\n    hospitalBedsByRequestedTime,\n    dollarsInFlight,\n    casesForVentilatorsByRequestedTime\n  };\n};\n\nmodule.exports = {\n  severeImpact\n};\n","const ROUTES = {\n  home: '/'\n};\n\nexport default ROUTES;\n","// eslint-disable-next-line no-unused-vars\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ROUTES from '../../utils/routes';\nimport '../../assets/css/index.scss';\n\nconst HomeFooter = (props) => (\n    <div className={props.footerClass}>\n    {props.page === 'login'\n      ? <span>New to Olympia? <a href={ROUTES.register}>Get Started</a></span>\n      : <a href={ROUTES.home}>Back to Login</a>\n    }\n        <br/>\n        <span className={props.copyright}>\n        Copyright @ {new Date().getFullYear()}.\n        Olympia Inc. All rights reserved. Terms and Conditions Apply.\n        </span>\n    </div>\n\n);\n\nHomeFooter.protoType = {\n  footerClass: PropTypes.string,\n  page: PropTypes.string,\n  copyright: PropTypes.string\n};\n\nHomeFooter.defaultProps = {\n  footerClass: 'login-footer',\n  page: 'login'\n};\n\nexport default HomeFooter;\n","// import { severeImpact } from './severeImpact';\n// import Impact from './impact.js';\nconst { Impact } = require('./impact.js');\nconst { severeImpact } = require('./severeImpact.js');\n\nexport const covid19ImpactEstimator = (data) => {\n  const {\n    impactCurrentlyInfected,\n    impactInfectionsByRequestedTime,\n    impactCasesByRequestedTime,\n    impacthospitalBedsByRequestedTime,\n    ImpactDollarsInFlight,\n    impactCasesForVentilatorsByRequestedTime\n  } = Impact(data);\n  const {\n    severeCurrentlyInfected,\n    severeInfectionsByRequestedTime,\n    severeCasesByRequestedTime,\n    hospitalBedsByRequestedTime,\n    dollarsInFlight,\n    casesForVentilatorsByRequestedTime\n  } = severeImpact(data);\n  const results = [\n    {\n      estimate: {\n        impact: {\n          currentlyInfected: impactCurrentlyInfected,\n          infectionsByRequestedTime: impactInfectionsByRequestedTime,\n          severeCasesByRequestedTime: impactCasesByRequestedTime,\n          hospitalBedsByRequestedTime: impacthospitalBedsByRequestedTime,\n          dollarsInFlight: ImpactDollarsInFlight,\n          casesForVentilatorsByRequestedTime: impactCasesForVentilatorsByRequestedTime\n        },\n        severeImpact: {\n          currentlyInfected: severeCurrentlyInfected,\n          infectionsByRequestedTime: severeInfectionsByRequestedTime,\n          severeCasesByRequestedTime,\n          hospitalBedsByRequestedTime,\n          dollarsInFlight,\n          casesForVentilatorsByRequestedTime\n        }\n      }\n    }\n  ];\n  const resultData = results[0];\n  return resultData;\n};\n\nexport default covid19ImpactEstimator;\n","/* eslint-disable no-shadow */\n/* eslint-disable no-unused-vars */\n// eslint-disable-next-line no-unused-vars\nimport React, { Component, useState, useEffect } from 'react';\n// eslint-disable-next-line no-unused-vars\nimport '../../assets/css/index.scss';\nimport validate from 'validate.js';\nimport '../../assets/css/button.scss';\nimport TextField from '@material-ui/core/TextField';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Typography from '@material-ui/core/Typography';\nimport { CardActions, Button, DialogActions } from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport HomeFooter from './homeFooter';\nimport { covid19ImpactEstimator } from '../../estimator';\n\nconst schema = {\n  timeToElapse: {\n    presence: { allowEmpty: false, message: 'is required' },\n    length: {\n      minimum: 1,\n      maximum: 25\n    }\n  },\n  population: {\n    presence: { allowEmpty: false, message: 'is required' },\n    length: {\n      minimum: 3,\n      maximum: 25\n    }\n  },\n  reportedCases: {\n    presence: { allowEmpty: false, message: 'is required' },\n    length: {\n      minimum: 1,\n      maximum: 25\n    }\n  },\n  totalHospitalBeds: {\n    presence: { allowEmpty: false, message: 'is required' },\n    length: {\n      maximum: 25,\n      minimum: 2\n    }\n  }\n};\n\nconst useStyles = makeStyles((theme) => createStyles({\n  formData: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: 200\n    }\n  },\n  root: {\n    flexGrow: 1,\n    marginTop: theme.spacing(3),\n    margin: theme.spacing(2),\n    backgroundColor: theme.palette.grey\n  },\n  paper: {\n    padding: theme.spacing(1),\n    //   textAlign: 'center',\n    color: theme.palette.text.secondary\n  }\n}));\n\nconst Home = () => {\n  const classes = useStyles();\n  const [resultsData, setResults] = useState('');\n  const [functionData, setData] = useState('');\n  const [formState, setFormState] = useState({\n    values: {\n      period: 'days'\n    },\n    touched: {},\n    errors: {}\n  });\n\n  useEffect(() => {\n    // @ts-ignore\n    const errors = validate(formState.values, schema);\n    setFormState((formState) => ({\n      ...formState,\n      isValid: !errors,\n      errors: errors || {}\n    }));\n  }, [formState.values]);\n\n  /**\n   * Ensures that the state is updated basing\n   * on the changes in the input fields\n   *\n   * @param {Object} target\n   *\n   * @returns {void}\n   */\n\n  const handleInputChange = (event) => {\n    event.persist();\n    setFormState((formState) => ({\n      ...formState,\n      values: {\n        ...formState.values,\n        [event.target.name || event.target.id]:\n          event.target.type === 'checkbox'\n            ? event.target.checked\n            : event.target.value\n      },\n      touched: {\n        ...formState.touched,\n        [event.target.name]: true\n      }\n    }));\n  };\n\n  const handleClear = (event) => {\n    event.preventDefault();\n    setFormState((formState) => ({\n      values: {},\n      isValid: false,\n      touched: {},\n      errors: {}\n    }));\n  };\n\n  const refreshPage = () => {\n    window.location.reload(true);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const {\n      reportedCases, timeToElapse, population, period, totalHospitalBeds\n    } = formState.values;\n    const data = {\n      region: {\n        name: 'Africa',\n        avgAge: 19.7,\n        avgDailyIncomeInUSD: 5,\n        avgDailyIncomePopulation: 0.71\n      },\n      periodType: period,\n      timeToElapse,\n      reportedCases,\n      population,\n      totalHospitalBeds\n    };\n    setData(data);\n    setResults('done');\n  };\n  const noData = (<Typography variant=\"caption\" display=\"inline\" gutterBottom>\n     No data, add to view Covid-19 estimates\n    </Typography>);\n  const hasError = (field) => (!!(formState.touched[field] && formState.errors[field]));\n  return (\n    <div className={classes.root} >\n            <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n                <Typography variant=\"h6\" gutterBottom>\n                    COVID-19 Estimator\n                </Typography>\n            </Grid><br/>\n\n      <Grid container spacing={2} >\n        <Grid item xs={12} sm={6}>\n          <Paper className={classes.paper}>\n          <Typography variant=\"overline\" display=\"block\" gutterBottom>\n        Input Covid details Below\n      </Typography>\n            <form className={classes.formData} noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n                <div>\n                    <TextField\n                    type=\"number\"\n                    label=\"Reported Cases\"\n                    id=\"outlined-size-normal\"\n                    placeholder=\"Reported Cases\"\n                    variant=\"outlined\"\n                    onChange={handleInputChange}\n                    name=\"reportedCases\"\n                    value={formState.values.reportedCases || ''}\n                    error={hasError('reportedCases')}\n                    helperText={\n                        // @ts-ignore\n                        hasError('reportedCases') ? formState.errors.reportedCases[0] : null\n                    }\n                    />\n                    <TextField\n                    type=\"number\"\n                    label=\"Total Hospital Beds\"\n                    id=\"outlined-size-normal\"\n                    name=\"totalHospitalBeds\"\n                    value={formState.values.totalHospitalBeds || ''}\n                    placeholder=\"Total Hospital Beds\"\n                    defaultValue=\"Normal\"\n                    variant=\"outlined\"\n                    error={hasError('totalHospitalBeds')}\n                    helperText={\n                        // @ts-ignore\n                        hasError('totalHospitalBeds') ? formState.errors.totalHospitalBeds[0] : null\n                    }\n                    onChange={handleInputChange}\n                    />\n                    <TextField\n                    type=\"number\"\n                    label=\"Population\"\n                    id=\"outlined-size-normal\"\n                    name=\"population\"\n                    placeholder=\"Population\"\n                    defaultValue=\"Normal\"\n                    variant=\"outlined\"\n                    onChange={handleInputChange}\n                    value={formState.values.population || ''}\n                    error={hasError('population')}\n                    helperText={\n                        // @ts-ignore\n                        hasError('population') ? formState.errors.population[0] : null\n                    }\n                    />\n                </div>\n                <div>\n                <TextField\n                    type=\"number\"\n                    label=\"Time To Elapse\"\n                    id=\"outlined-size-normal\"\n                    name=\"timeToElapse\"\n                    placeholder=\"Time To Elapse\"\n                    defaultValue=\"Normal\"\n                    variant=\"outlined\"\n                    onChange={handleInputChange}\n                    value={formState.values.timeToElapse || ''}\n                    error={hasError('timeToElapse')}\n                    helperText={\n                        // @ts-ignore\n                        hasError('timeToElapse') ? formState.errors.timeToElapse[0] : null\n                    }\n                    />\n                    <FormControl component=\"fieldset\">\n                    <FormLabel component=\"legend\">Select Period Type (default period is days) </FormLabel>\n                    <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\">\n                    <FormControlLabel\n                        value=\"days\"\n                        control={<Radio color=\"primary\" />}\n                        label=\"Days\"\n                        labelPlacement=\"Days\"\n                        name=\"period\"\n                        onChange={handleInputChange}\n                    />\n                    <FormControlLabel\n                    value=\"weeks\"\n                    control={<Radio color=\"primary\" />}\n                    label=\"Weeks\"\n                    labelPlacement=\"Weeks\"\n                    name=\"period\"\n                    onChange={handleInputChange}\n                    />\n                    <FormControlLabel\n                    value=\"months\"\n                    control={<Radio color=\"primary\" />}\n                    label=\"Months\"\n                    labelPlacement=\"Months\"\n                    name=\"period\"\n                    onChange={handleInputChange}\n                    />\n                    </RadioGroup>\n                    </FormControl>\n                </div>\n                    <DialogActions>\n                    <Button onClick={handleClear} color=\"primary\">\n                        Clear\n                    </Button>\n                    <Button variant=\"contained\" color=\"primary\" type=\"submit\" disabled={!formState.isValid} >\n                        data-go-estimate\n                    </Button>\n                    </DialogActions>\n             </form>\n          </Paper>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n        <Paper className={classes.paper}>\n        <Typography variant=\"overline\" display=\"block\" gutterBottom>\n            View your estimates Below\n        </Typography>\n        <Typography variant=\"body1\" display=\"block\" gutterBottom style={{ color: '#29b6f6' }}>\n            Estimated Impact\n        </Typography>\n      { resultsData === '' ? noData : (<>\n          <Paper className={classes.paper}>CurrentlyInfected : <span style={{ color: 'black' }} >{ covid19ImpactEstimator(functionData).estimate.impact.currentlyInfected}</span></Paper><br/>\n          <Paper className={classes.paper}>Infections By Requested Time : <span style={{ color: 'black' }} >{covid19ImpactEstimator(functionData).estimate.impact.infectionsByRequestedTime}</span></Paper><br/>\n          <Paper className={classes.paper}>Severe Cases By Requested Time : <span style={{ color: 'black' }} >{covid19ImpactEstimator(functionData).estimate.impact.severeCasesByRequestedTime}</span></Paper><br/>\n          <Paper className={classes.paper}>Hospital Beds By Requested Time : <span style={{ color: 'black' }} >{ covid19ImpactEstimator(functionData).estimate.impact.hospitalBedsByRequestedTime}</span></Paper><br/>\n          <Paper className={classes.paper}>Dollars In Flight : <span style={{ color: 'black' }} >{ covid19ImpactEstimator(functionData).estimate.impact.dollarsInFlight}</span></Paper><br/>\n          <Paper className={classes.paper}>Cases For Ventilators By Requested Time : <span style={{ color: 'black' }} >{covid19ImpactEstimator(functionData).estimate.impact.casesForVentilatorsByRequestedTime}</span></Paper><br/>\n\n        </>)}\n        <Typography variant=\"body1\" display=\"block\" gutterBottom style={{ color: '#29b6f6' }}>\n        Estimated Severe Impact\n      </Typography>\n      { resultsData === '' ? noData : (<>\n        <Paper className={classes.paper}>CurrentlyInfected : <span style={{ color: 'black' }} >{ covid19ImpactEstimator(functionData).estimate.severeImpact.currentlyInfected}</span></Paper><br/>\n          <Paper className={classes.paper}>Infections By Requested Time : <span style={{ color: 'black' }} >{covid19ImpactEstimator(functionData).estimate.severeImpact.infectionsByRequestedTime}</span></Paper><br/>\n          <Paper className={classes.paper}>Severe Cases By Requested Time : <span style={{ color: 'black' }} >{ covid19ImpactEstimator(functionData).estimate.severeImpact.severeCasesByRequestedTime}</span></Paper><br/>\n          <Paper className={classes.paper}>Hospital Beds By Requested Time : <span style={{ color: 'black' }} >{ covid19ImpactEstimator(functionData).estimate.severeImpact.hospitalBedsByRequestedTime}</span></Paper><br/>\n          <Paper className={classes.paper}>Dollars In Flight : <span style={{ color: 'black' }} >{ covid19ImpactEstimator(functionData).estimate.severeImpact.dollarsInFlight}</span></Paper><br/>\n          <Paper className={classes.paper}>Cases For Ventilators By Requested Time : <span style={{ color: 'black' }} >{covid19ImpactEstimator(functionData).estimate.severeImpact.casesForVentilatorsByRequestedTime}</span></Paper><br/>\n          </>)}\n      </Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Home;\n","// eslint-disable-next-line no-unused-vars\nimport React from 'react';\nimport {\n  // eslint-disable-next-line no-unused-vars\n  withRouter, Route, Switch, Redirect\n} from 'react-router-dom';\nimport ROUTES from './utils/routes';\nimport Home from './components/home';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path={ROUTES.home} component={Home} />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n      // [::1] is the IPv6 localhost address.\n      || window.location.hostname === '[::1]'\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      || window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        // eslint-disable-next-line no-use-before-define\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // eslint-disable-next-line no-console\n          console.log(\n            'This web app is being served cache-first by a service '\n                + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        // eslint-disable-next-line no-use-before-define\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // eslint-disable-next-line no-console\n              console.log(\n                'New content is available and will be used when all '\n                    + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // eslint-disable-next-line no-console\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      // eslint-disable-next-line no-console\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n          || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","// eslint-disable-next-line no-unused-vars\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n// eslint-disable-next-line no-unused-vars\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\n// eslint-disable-next-line no-unused-vars\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>,\n    document.getElementById('root')\n);\n\n// ReactDOM.render(<App />, document.querySelector('#root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}